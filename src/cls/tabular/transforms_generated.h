// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_TRANSFORMS_TABLES_H_
#define FLATBUFFERS_GENERATED_TRANSFORMS_TABLES_H_

#include "flatbuffers/flatbuffers.h"

namespace Tables {

struct Record;

struct Record FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_TABLE_NAME = 4,
    VT_LAYOUT = 6,
    VT_SCHEMA = 8,
    VT_RID = 10,
    VT_NULLBITS = 12,
    VT_ATT0 = 14,
    VT_ATT1 = 16,
    VT_ATT2 = 18,
    VT_ATT3 = 20
  };
  const flatbuffers::String *table_name() const {
    return GetPointer<const flatbuffers::String *>(VT_TABLE_NAME);
  }
  const flatbuffers::String *layout() const {
    return GetPointer<const flatbuffers::String *>(VT_LAYOUT);
  }
  const flatbuffers::String *schema() const {
    return GetPointer<const flatbuffers::String *>(VT_SCHEMA);
  }
  uint64_t RID() const {
    return GetField<uint64_t>(VT_RID, 0);
  }
  const flatbuffers::Vector<uint64_t> *nullbits() const {
    return GetPointer<const flatbuffers::Vector<uint64_t> *>(VT_NULLBITS);
  }
  uint64_t att0() const {
    return GetField<uint64_t>(VT_ATT0, 0);
  }
  uint64_t att1() const {
    return GetField<uint64_t>(VT_ATT1, 0);
  }
  uint64_t att2() const {
    return GetField<uint64_t>(VT_ATT2, 0);
  }
  uint64_t att3() const {
    return GetField<uint64_t>(VT_ATT3, 0);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_TABLE_NAME) &&
           verifier.VerifyString(table_name()) &&
           VerifyOffset(verifier, VT_LAYOUT) &&
           verifier.VerifyString(layout()) &&
           VerifyOffset(verifier, VT_SCHEMA) &&
           verifier.VerifyString(schema()) &&
           VerifyField<uint64_t>(verifier, VT_RID) &&
           VerifyOffset(verifier, VT_NULLBITS) &&
           verifier.VerifyVector(nullbits()) &&
           VerifyField<uint64_t>(verifier, VT_ATT0) &&
           VerifyField<uint64_t>(verifier, VT_ATT1) &&
           VerifyField<uint64_t>(verifier, VT_ATT2) &&
           VerifyField<uint64_t>(verifier, VT_ATT3) &&
           verifier.EndTable();
  }
};

struct RecordBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_table_name(flatbuffers::Offset<flatbuffers::String> table_name) {
    fbb_.AddOffset(Record::VT_TABLE_NAME, table_name);
  }
  void add_layout(flatbuffers::Offset<flatbuffers::String> layout) {
    fbb_.AddOffset(Record::VT_LAYOUT, layout);
  }
  void add_schema(flatbuffers::Offset<flatbuffers::String> schema) {
    fbb_.AddOffset(Record::VT_SCHEMA, schema);
  }
  void add_RID(uint64_t RID) {
    fbb_.AddElement<uint64_t>(Record::VT_RID, RID, 0);
  }
  void add_nullbits(flatbuffers::Offset<flatbuffers::Vector<uint64_t>> nullbits) {
    fbb_.AddOffset(Record::VT_NULLBITS, nullbits);
  }
  void add_att0(uint64_t att0) {
    fbb_.AddElement<uint64_t>(Record::VT_ATT0, att0, 0);
  }
  void add_att1(uint64_t att1) {
    fbb_.AddElement<uint64_t>(Record::VT_ATT1, att1, 0);
  }
  void add_att2(uint64_t att2) {
    fbb_.AddElement<uint64_t>(Record::VT_ATT2, att2, 0);
  }
  void add_att3(uint64_t att3) {
    fbb_.AddElement<uint64_t>(Record::VT_ATT3, att3, 0);
  }
  explicit RecordBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  RecordBuilder &operator=(const RecordBuilder &);
  flatbuffers::Offset<Record> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<Record>(end);
    return o;
  }
};

inline flatbuffers::Offset<Record> CreateRecord(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> table_name = 0,
    flatbuffers::Offset<flatbuffers::String> layout = 0,
    flatbuffers::Offset<flatbuffers::String> schema = 0,
    uint64_t RID = 0,
    flatbuffers::Offset<flatbuffers::Vector<uint64_t>> nullbits = 0,
    uint64_t att0 = 0,
    uint64_t att1 = 0,
    uint64_t att2 = 0,
    uint64_t att3 = 0) {
  RecordBuilder builder_(_fbb);
  builder_.add_att3(att3);
  builder_.add_att2(att2);
  builder_.add_att1(att1);
  builder_.add_att0(att0);
  builder_.add_RID(RID);
  builder_.add_nullbits(nullbits);
  builder_.add_schema(schema);
  builder_.add_layout(layout);
  builder_.add_table_name(table_name);
  return builder_.Finish();
}

inline flatbuffers::Offset<Record> CreateRecordDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const char *table_name = nullptr,
    const char *layout = nullptr,
    const char *schema = nullptr,
    uint64_t RID = 0,
    const std::vector<uint64_t> *nullbits = nullptr,
    uint64_t att0 = 0,
    uint64_t att1 = 0,
    uint64_t att2 = 0,
    uint64_t att3 = 0) {
  auto table_name__ = table_name ? _fbb.CreateString(table_name) : 0;
  auto layout__ = layout ? _fbb.CreateString(layout) : 0;
  auto schema__ = schema ? _fbb.CreateString(schema) : 0;
  auto nullbits__ = nullbits ? _fbb.CreateVector<uint64_t>(*nullbits) : 0;
  return Tables::CreateRecord(
      _fbb,
      table_name__,
      layout__,
      schema__,
      RID,
      nullbits__,
      att0,
      att1,
      att2,
      att3);
}

inline const Tables::Record *GetRecord(const void *buf) {
  return flatbuffers::GetRoot<Tables::Record>(buf);
}

inline const Tables::Record *GetSizePrefixedRecord(const void *buf) {
  return flatbuffers::GetSizePrefixedRoot<Tables::Record>(buf);
}

inline bool VerifyRecordBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<Tables::Record>(nullptr);
}

inline bool VerifySizePrefixedRecordBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<Tables::Record>(nullptr);
}

inline void FinishRecordBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<Tables::Record> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedRecordBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<Tables::Record> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace Tables

#endif  // FLATBUFFERS_GENERATED_TRANSFORMS_TABLES_H_
