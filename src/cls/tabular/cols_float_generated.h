// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_COLSFLOAT_TABLES_H_
#define FLATBUFFERS_GENERATED_COLSFLOAT_TABLES_H_

#include "flatbuffers/flatbuffers.h"

namespace Tables {

struct Cols_float;

struct Cols_float FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_SKYHOOK_VERSION = 4,
    VT_SCHEMA_VERSION = 6,
    VT_COL_NAME = 8,
    VT_COL_INDEX = 10,
    VT_RIDS = 12,
    VT_ATT0 = 14
  };
  uint8_t skyhook_version() const {
    return GetField<uint8_t>(VT_SKYHOOK_VERSION, 0);
  }
  uint8_t schema_version() const {
    return GetField<uint8_t>(VT_SCHEMA_VERSION, 0);
  }
  const flatbuffers::String *col_name() const {
    return GetPointer<const flatbuffers::String *>(VT_COL_NAME);
  }
  uint64_t col_index() const {
    return GetField<uint64_t>(VT_COL_INDEX, 0);
  }
  const flatbuffers::Vector<uint64_t> *RIDs() const {
    return GetPointer<const flatbuffers::Vector<uint64_t> *>(VT_RIDS);
  }
  const flatbuffers::Vector<float> *att0() const {
    return GetPointer<const flatbuffers::Vector<float> *>(VT_ATT0);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint8_t>(verifier, VT_SKYHOOK_VERSION) &&
           VerifyField<uint8_t>(verifier, VT_SCHEMA_VERSION) &&
           VerifyOffset(verifier, VT_COL_NAME) &&
           verifier.VerifyString(col_name()) &&
           VerifyField<uint64_t>(verifier, VT_COL_INDEX) &&
           VerifyOffset(verifier, VT_RIDS) &&
           verifier.VerifyVector(RIDs()) &&
           VerifyOffset(verifier, VT_ATT0) &&
           verifier.VerifyVector(att0()) &&
           verifier.EndTable();
  }
};

struct Cols_floatBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_skyhook_version(uint8_t skyhook_version) {
    fbb_.AddElement<uint8_t>(Cols_float::VT_SKYHOOK_VERSION, skyhook_version, 0);
  }
  void add_schema_version(uint8_t schema_version) {
    fbb_.AddElement<uint8_t>(Cols_float::VT_SCHEMA_VERSION, schema_version, 0);
  }
  void add_col_name(flatbuffers::Offset<flatbuffers::String> col_name) {
    fbb_.AddOffset(Cols_float::VT_COL_NAME, col_name);
  }
  void add_col_index(uint64_t col_index) {
    fbb_.AddElement<uint64_t>(Cols_float::VT_COL_INDEX, col_index, 0);
  }
  void add_RIDs(flatbuffers::Offset<flatbuffers::Vector<uint64_t>> RIDs) {
    fbb_.AddOffset(Cols_float::VT_RIDS, RIDs);
  }
  void add_att0(flatbuffers::Offset<flatbuffers::Vector<float>> att0) {
    fbb_.AddOffset(Cols_float::VT_ATT0, att0);
  }
  explicit Cols_floatBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  Cols_floatBuilder &operator=(const Cols_floatBuilder &);
  flatbuffers::Offset<Cols_float> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<Cols_float>(end);
    return o;
  }
};

inline flatbuffers::Offset<Cols_float> CreateCols_float(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint8_t skyhook_version = 0,
    uint8_t schema_version = 0,
    flatbuffers::Offset<flatbuffers::String> col_name = 0,
    uint64_t col_index = 0,
    flatbuffers::Offset<flatbuffers::Vector<uint64_t>> RIDs = 0,
    flatbuffers::Offset<flatbuffers::Vector<float>> att0 = 0) {
  Cols_floatBuilder builder_(_fbb);
  builder_.add_col_index(col_index);
  builder_.add_att0(att0);
  builder_.add_RIDs(RIDs);
  builder_.add_col_name(col_name);
  builder_.add_schema_version(schema_version);
  builder_.add_skyhook_version(skyhook_version);
  return builder_.Finish();
}

inline flatbuffers::Offset<Cols_float> CreateCols_floatDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint8_t skyhook_version = 0,
    uint8_t schema_version = 0,
    const char *col_name = nullptr,
    uint64_t col_index = 0,
    const std::vector<uint64_t> *RIDs = nullptr,
    const std::vector<float> *att0 = nullptr) {
  auto col_name__ = col_name ? _fbb.CreateString(col_name) : 0;
  auto RIDs__ = RIDs ? _fbb.CreateVector<uint64_t>(*RIDs) : 0;
  auto att0__ = att0 ? _fbb.CreateVector<float>(*att0) : 0;
  return Tables::CreateCols_float(
      _fbb,
      skyhook_version,
      schema_version,
      col_name__,
      col_index,
      RIDs__,
      att0__);
}

inline const Tables::Cols_float *GetCols_float(const void *buf) {
  return flatbuffers::GetRoot<Tables::Cols_float>(buf);
}

inline const Tables::Cols_float *GetSizePrefixedCols_float(const void *buf) {
  return flatbuffers::GetSizePrefixedRoot<Tables::Cols_float>(buf);
}

inline bool VerifyCols_floatBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<Tables::Cols_float>(nullptr);
}

inline bool VerifySizePrefixedCols_floatBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<Tables::Cols_float>(nullptr);
}

inline void FinishCols_floatBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<Tables::Cols_float> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedCols_floatBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<Tables::Cols_float> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace Tables

#endif  // FLATBUFFERS_GENERATED_COLSFLOAT_TABLES_H_
