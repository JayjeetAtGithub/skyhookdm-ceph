// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_TABLECOLSINT_TABLES_H_
#define FLATBUFFERS_GENERATED_TABLECOLSINT_TABLES_H_

#include "flatbuffers/flatbuffers.h"

namespace Tables {

struct Table;

struct Table FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_SKYHOOK_VERSION = 4,
    VT_SCHEMA_VERSION = 6,
    VT_COL_NAME = 8,
    VT_COL_INDEX = 10,
    VT_LAYOUT = 12,
    VT_RIDS = 14,
    VT_DATA = 16
  };
  uint8_t skyhook_version() const {
    return GetField<uint8_t>(VT_SKYHOOK_VERSION, 0);
  }
  uint8_t schema_version() const {
    return GetField<uint8_t>(VT_SCHEMA_VERSION, 0);
  }
  const flatbuffers::String *col_name() const {
    return GetPointer<const flatbuffers::String *>(VT_COL_NAME);
  }
  uint64_t col_index() const {
    return GetField<uint64_t>(VT_COL_INDEX, 0);
  }
  const flatbuffers::String *layout() const {
    return GetPointer<const flatbuffers::String *>(VT_LAYOUT);
  }
  const flatbuffers::Vector<uint64_t> *RIDs() const {
    return GetPointer<const flatbuffers::Vector<uint64_t> *>(VT_RIDS);
  }
  const flatbuffers::Vector<uint64_t> *data() const {
    return GetPointer<const flatbuffers::Vector<uint64_t> *>(VT_DATA);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint8_t>(verifier, VT_SKYHOOK_VERSION) &&
           VerifyField<uint8_t>(verifier, VT_SCHEMA_VERSION) &&
           VerifyOffset(verifier, VT_COL_NAME) &&
           verifier.VerifyString(col_name()) &&
           VerifyField<uint64_t>(verifier, VT_COL_INDEX) &&
           VerifyOffset(verifier, VT_LAYOUT) &&
           verifier.VerifyString(layout()) &&
           VerifyOffset(verifier, VT_RIDS) &&
           verifier.VerifyVector(RIDs()) &&
           VerifyOffset(verifier, VT_DATA) &&
           verifier.VerifyVector(data()) &&
           verifier.EndTable();
  }
};

struct TableBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_skyhook_version(uint8_t skyhook_version) {
    fbb_.AddElement<uint8_t>(Table::VT_SKYHOOK_VERSION, skyhook_version, 0);
  }
  void add_schema_version(uint8_t schema_version) {
    fbb_.AddElement<uint8_t>(Table::VT_SCHEMA_VERSION, schema_version, 0);
  }
  void add_col_name(flatbuffers::Offset<flatbuffers::String> col_name) {
    fbb_.AddOffset(Table::VT_COL_NAME, col_name);
  }
  void add_col_index(uint64_t col_index) {
    fbb_.AddElement<uint64_t>(Table::VT_COL_INDEX, col_index, 0);
  }
  void add_layout(flatbuffers::Offset<flatbuffers::String> layout) {
    fbb_.AddOffset(Table::VT_LAYOUT, layout);
  }
  void add_RIDs(flatbuffers::Offset<flatbuffers::Vector<uint64_t>> RIDs) {
    fbb_.AddOffset(Table::VT_RIDS, RIDs);
  }
  void add_data(flatbuffers::Offset<flatbuffers::Vector<uint64_t>> data) {
    fbb_.AddOffset(Table::VT_DATA, data);
  }
  explicit TableBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  TableBuilder &operator=(const TableBuilder &);
  flatbuffers::Offset<Table> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<Table>(end);
    return o;
  }
};

inline flatbuffers::Offset<Table> CreateTable(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint8_t skyhook_version = 0,
    uint8_t schema_version = 0,
    flatbuffers::Offset<flatbuffers::String> col_name = 0,
    uint64_t col_index = 0,
    flatbuffers::Offset<flatbuffers::String> layout = 0,
    flatbuffers::Offset<flatbuffers::Vector<uint64_t>> RIDs = 0,
    flatbuffers::Offset<flatbuffers::Vector<uint64_t>> data = 0) {
  TableBuilder builder_(_fbb);
  builder_.add_col_index(col_index);
  builder_.add_data(data);
  builder_.add_RIDs(RIDs);
  builder_.add_layout(layout);
  builder_.add_col_name(col_name);
  builder_.add_schema_version(schema_version);
  builder_.add_skyhook_version(skyhook_version);
  return builder_.Finish();
}

inline flatbuffers::Offset<Table> CreateTableDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint8_t skyhook_version = 0,
    uint8_t schema_version = 0,
    const char *col_name = nullptr,
    uint64_t col_index = 0,
    const char *layout = nullptr,
    const std::vector<uint64_t> *RIDs = nullptr,
    const std::vector<uint64_t> *data = nullptr) {
  auto col_name__ = col_name ? _fbb.CreateString(col_name) : 0;
  auto layout__ = layout ? _fbb.CreateString(layout) : 0;
  auto RIDs__ = RIDs ? _fbb.CreateVector<uint64_t>(*RIDs) : 0;
  auto data__ = data ? _fbb.CreateVector<uint64_t>(*data) : 0;
  return Tables::CreateTable(
      _fbb,
      skyhook_version,
      schema_version,
      col_name__,
      col_index,
      layout__,
      RIDs__,
      data__);
}

inline const Tables::Table *GetTable(const void *buf) {
  return flatbuffers::GetRoot<Tables::Table>(buf);
}

inline const Tables::Table *GetSizePrefixedTable(const void *buf) {
  return flatbuffers::GetSizePrefixedRoot<Tables::Table>(buf);
}

inline bool VerifyTableBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<Tables::Table>(nullptr);
}

inline bool VerifySizePrefixedTableBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<Tables::Table>(nullptr);
}

inline void FinishTableBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<Tables::Table> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedTableBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<Tables::Table> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace Tables

#endif  // FLATBUFFERS_GENERATED_TABLECOLSINT_TABLES_H_
