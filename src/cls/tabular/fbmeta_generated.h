// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_FBMETA_TABLES_H_
#define FLATBUFFERS_GENERATED_FBMETA_TABLES_H_

#include "flatbuffers/flatbuffers.h"

namespace Tables {

struct FBMeta;

struct FBMeta FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_SCHEMA = 4,
    VT_LAYOUT = 6,
    VT_NUM_FBS = 8
  };
  const flatbuffers::Vector<uint64_t> *schema() const {
    return GetPointer<const flatbuffers::Vector<uint64_t> *>(VT_SCHEMA);
  }
  uint64_t layout() const {
    return GetField<uint64_t>(VT_LAYOUT, 0);
  }
  uint64_t num_fbs() const {
    return GetField<uint64_t>(VT_NUM_FBS, 0);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_SCHEMA) &&
           verifier.VerifyVector(schema()) &&
           VerifyField<uint64_t>(verifier, VT_LAYOUT) &&
           VerifyField<uint64_t>(verifier, VT_NUM_FBS) &&
           verifier.EndTable();
  }
};

struct FBMetaBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_schema(flatbuffers::Offset<flatbuffers::Vector<uint64_t>> schema) {
    fbb_.AddOffset(FBMeta::VT_SCHEMA, schema);
  }
  void add_layout(uint64_t layout) {
    fbb_.AddElement<uint64_t>(FBMeta::VT_LAYOUT, layout, 0);
  }
  void add_num_fbs(uint64_t num_fbs) {
    fbb_.AddElement<uint64_t>(FBMeta::VT_NUM_FBS, num_fbs, 0);
  }
  explicit FBMetaBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  FBMetaBuilder &operator=(const FBMetaBuilder &);
  flatbuffers::Offset<FBMeta> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<FBMeta>(end);
    return o;
  }
};

inline flatbuffers::Offset<FBMeta> CreateFBMeta(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::Vector<uint64_t>> schema = 0,
    uint64_t layout = 0,
    uint64_t num_fbs = 0) {
  FBMetaBuilder builder_(_fbb);
  builder_.add_num_fbs(num_fbs);
  builder_.add_layout(layout);
  builder_.add_schema(schema);
  return builder_.Finish();
}

inline flatbuffers::Offset<FBMeta> CreateFBMetaDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<uint64_t> *schema = nullptr,
    uint64_t layout = 0,
    uint64_t num_fbs = 0) {
  auto schema__ = schema ? _fbb.CreateVector<uint64_t>(*schema) : 0;
  return Tables::CreateFBMeta(
      _fbb,
      schema__,
      layout,
      num_fbs);
}

inline const Tables::FBMeta *GetFBMeta(const void *buf) {
  return flatbuffers::GetRoot<Tables::FBMeta>(buf);
}

inline const Tables::FBMeta *GetSizePrefixedFBMeta(const void *buf) {
  return flatbuffers::GetSizePrefixedRoot<Tables::FBMeta>(buf);
}

inline bool VerifyFBMetaBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<Tables::FBMeta>(nullptr);
}

inline bool VerifySizePrefixedFBMetaBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<Tables::FBMeta>(nullptr);
}

inline void FinishFBMetaBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<Tables::FBMeta> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedFBMetaBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<Tables::FBMeta> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace Tables

#endif  // FLATBUFFERS_GENERATED_FBMETA_TABLES_H_
